/* Text displayed after enabling `ArrowsViewControllers`. */
"arrows.helpTextArrows" = "arrows.helpTextArrows";

/* Text displayed after disabling `ArrowsViewControllers`. */
"arrows.helpTextScroll" = "arrows.helpTextScroll";

/* Title of the alert shown when a session that is already active was clicked. */
"bookmaks.sessionAlreadyActive" = "bookmaks.sessionAlreadyActive";

/* Authenticate with biometry to connect to the connection. */
"bookmarks.authenticateToConnect" = "bookmarks.authenticateToConnect";

/* Title of the alert shown while connecting to a session. */
"bookmarks.connecting" = "bookmarks.connecting";

/* Connections title header. */
"bookmarks.connections" = "bookmarks.connections";

/* Devices title header. */
"bookmarks.devices" = "bookmarks.devices";

/* Enter password if biometry auth failed. */
"bookmarks.enterPassword" = "bookmarks.enterPassword";

/* Message of the alert for asking the user for the password. Enter password for user <User>. */
"bookmarks.enterPasswordMessage" = "bookmarks.enterPasswordMessage";

/* Title of the alert for asking the user for the password. */
"bookmarks.enterPasswordTitle" = "bookmarks.enterPasswordTitle";

/* Restart the session. */
"bookmarks.restart" = "bookmarks.restart";

/* Resume the session. */
"bookmarks.resume" = "bookmarks.resume";

/* Bookmarks title. */
"bookmarks.title" = "bookmarks.title";

/* Ask the user for typing the new folder's name. */
"browsers.chooseNewFolderName" = "browsers.chooseNewFolderName";

/* Copy file in selected directory. */
"browsers.copyHere" = "browsers.copyHere";

/* Create a folder. */
"browsers.createFolder" = "browsers.createFolder";

/* Message of the alert shown for creating a file. */
"browsers.createMessage" = "browsers.createMessage";

/* Title of the alert shown for creating a file. */
"browsers.createTitle" = "browsers.createTitle";

/* Title of an alert shown when a file couldn't be copied. */
"browsers.errorCopyingFile" = "browsers.errorCopyingFile";

/* Title of the alert shown when there was an error creating a directory. */
"browsers.errorCreatingDirectory" = "browsers.errorCreatingDirectory";

/* Title of the alert shown when there was an error creating a file. */
"browsers.errorCreatingFile" = "browsers.errorCreatingFile";

/* Title of the alert shown when a file couldn't be imported. */
"browsers.errorImporting" = "browsers.errorImporting";

/* Title of an alert shown when a file couldn't be moved. */
"browsers.errorMovingFile" = "browsers.errorMovingFile";

/* Title of the alert shown when a directory couldn't be opened. */
"browsers.errorOpeningDirectory" = "browsers.errorOpeningDirectory";

/* Folder name placeholder. */
"browsers.folderName" = "browsers.folderName";

/* Import file. */
"browsers.import" = "browsers.import";

/* Move file in selected directory. */
"browsers.moveHere" = "browsers.moveHere";

/* Message of the alert shown when a file couldn't be moved or copied because the pasteboard is empty. */
"browsers.noFileInPasteboard" = "browsers.noFileInPasteboard";

/* Ask where a file should be copied. */
"browsers.selectDirectoryWhereCopyFile" = "browsers.selectDirectoryWhereCopyFile";

/* Cancel */
"cancel" = "cancel";

/* The title of the alert shown when a file couldn't be removed. */
"cell.errorFile" = "cell.errorFile";

/* The title of the alert shown when a directory couldn't be removed. */
"cell.errorRemovingDirectory" = "cell.errorRemovingDirectory";

/* Title of the alert shown when a file couldn't be renamed. */
"cell.errorRenaming" = "cell.errorRenaming";

/* New file name placeholder. */
"cell.newFileName" = "cell.newFileName";

/* Paste */
"cell.paste" = "cell.paste";

/* Paste selection */
"cell.pasteSelection" = "cell.pasteSelection";

/* Title of the alert shown while removing file. */
"cell.removing" = "cell.removing";

/* Rename file. */
"cell.rename" = "cell.rename";

/* The mesage of the alert for rename a file. Write new name for <fileToRename.filename>. */
"cell.renameFileMessage" = "cell.renameFileMessage";

/* The title of the alert for rename a file */
"cell.renameFileTitle" = "cell.renameFileTitle";

/* Toggle top bar */
"cell.toggleTopBar" = "cell.toggleTopBar";

/* Connect */
"connect" = "connect";

/* Change private key. */
"connection.changePrivKey" = "connection.changePrivKey";

/* Change public key. */
"connection.changePubKey" = "connection.changePubKey";

/* Import private key. */
"connection.importPrivKey" = "connection.importPrivKey";

/* Import public key. */
"connection.importPubKey" = "connection.importPubKey";

/* Passphrase for key placeholder */
"connection.passphrase" = "connection.passphrase";

/* Copying */
"copying" = "copying";

/* Create */
"create" = "create";

/* Ask for the password. Authenticate as <User> user. */
"delegate.authenticateAsUser" = "delegate.authenticateAsUser";

/* Open the session */
"delegate.connect" = "delegate.connect";

/* Open the session and save it */
"delegate.connectAndRemember" = "delegate.connectAndRemember";

/* Title for the alert shown for authenticating to the session opened by an URL. */
"delegate.openSSHConnection" = "delegate.openSSHConnection";

/* Password placeholder. */
"delegate.passwordPlaceholder" = "delegate.passwordPlaceholder";

/* Select connection to export file. */
"delegate.selectConectionToExportFile" = "delegate.selectConectionToExportFile";

/* Select connection to upload file. */
"delegate.selectConectionToUploadFile" = "delegate.selectConectionToUploadFile";

/* Select file to import. */
"delegate.selectFileToImport" = "delegate.selectFileToImport";

/* Select directory to upload file. */
"delegate.selectFolderWhereUploadFile" = "delegate.selectFolderWhereUploadFile";

/* Use plugin. */
"delegate.usePlugin" = "delegate.usePlugin";

/* Message of the alert for importing a plugin. */
"delegate.usePluginMessage" = "delegate.usePluginMessage";

/* Title of the alert for importing a plugin. */
"delegate.usePluginTitle" = "delegate.usePluginTitle";

/* Username placeholder. */
"delegate.usernamePlaceholder" = "delegate.usernamePlaceholder";

/* Error shown when the SFTP session couldn't read a remote item. */
"dir.checkForPermissions" = "dir.checkForPermissions";

/* Downloading... */
"dir.downloading" = "dir.downloading";

/* Message of the alert shown when the client couldn't login to the server. */
"dir.errorAuthenticating" = "dir.errorAuthenticating";

/* Message of the alert shown when the client couldn't connect to the server. */
"dir.errorConnecting" = "dir.errorConnecting";

/* Title of the alert shown after a download error. */
"dir.errorDownloading" = "dir.errorDownloading";

/* Title of the alert shown when the session couldn't be opened. */
"dir.errorOpeningSessionTitle" = "dir.errorOpeningSessionTitle";

/* Title of the alert shown when the data of a local file couldn't be read. */
"dir.errorReadingFile" = "dir.errorReadingFile";

/* Message of the alert shown when a file couldn't be uploaded. Error uploading <File> to <Destination>. */
"dir.errorUploadingFileToDestination" = "dir.errorUploadingFileToDestination";

/* Message of the alert shown when a file couldn't be uploaded. */
"dir.errorUploadingMessage" = "dir.errorUploadingMessage";

/* Title of the alert shown when a file couldn't be uploaded. */
"dir.errorUploadingTitle" = "dir.errorUploadingTitle";

/* Import file from the Pisth sandbox. */
"dir.importFromPisth" = "dir.importFromPisth";

/* Message of the alert asking for sending a file to the server. Do you want to send <File> to <Directory>? */
"dir.sendFile" = "dir.sendFile";

/* Message of the alert for asking the user for uploading files. Do you want to upload <Files count> files to <Destination>? */
"dir.uploadFilesMessage" = "dir.uploadFilesMessage";

/* Title of the alert for asking the user for uploading files. Upload <Files count> files? */
"dir.uploadFilesTitle" = "dir.uploadFilesTitle";

/* Use default language */
"editor.default" = "editor.default";

/* Don't save. */
"editor.dontSave" = "editor.dontSave";

/* Title for the alert shown when there is an error reading the file. */
"editor.errorOpeningFile" = "editor.errorOpeningFile";

/* No language selected. */
"editor.none" = "editor.none";

/* Save file. */
"editor.save" = "editor.save";

/* Ask for saving changes. Message of the alert. */
"editor.saveChangesMessage" = "editor.saveChangesMessage";

/* Ask for saving changes. Title of the alert. */
"editor.saveChangesTitle" = "editor.saveChangesTitle";

/* Ask for selecting a language for syntax highlighting. */
"editor.selectLanguage" = "editor.selectLanguage";

/* Ask for selecting a theme for syntax highlighting. */
"editor.selectTheme" = "editor.selectTheme";

/* Title for the alert shown when there is an error saving the file. */
"errorSavingFile" = "errorSavingFile";

/* Request a commit message to the user. */
"git.commitMessage" = "git.commitMessage";

/* Commits for <branch> */
"git.commitsFor" = "git.commitsFor";

/* Directory. */
"info.directory" = "info.directory";

/* Describe file. */
"info.fileWithExtension" = "info.fileWithExtension";

/* Symbolic link. */
"info.symLink" = "info.symLink";

/* Title of the View controller. */
"info.title" = "info.title";

/* Loading */
"loading" = "loading";

/* Message of the alert for creating a terminal plugin. */
"local.createPluginMessage" = "local.createPluginMessage";

/* Placeholder for the new plugin name. */
"local.createPluginPlaceholder" = "local.createPluginPlaceholder";

/* Title of the alert for creating a terminal plugin. */
"local.createPluginTitle" = "local.createPluginTitle";

/* Create a plugin for the terminal. */
"local.createTerminalPlugin" = "local.createTerminalPlugin";

/* Edit the code of an HTML file. */
"local.editHTML" = "local.editHTML";

/* Message of the alert shown when there was an error creating a plugin. */
"local.errorCreatingPluginMessage" = "local.errorCreatingPluginMessage";

/* Title of the alert shown when there was an error creating a plugin. */
"local.errorCreatingPluginTitle" = "local.errorCreatingPluginTitle";

/* The message of an alert shown when an HTML file will be opened to ask how to open it. */
"local.openFileMessage" = "local.openFileMessage";

/* The tilte of an alert shown when an HTML file will be opened to ask how to open it. */
"local.openFileTitle" = "local.openFileTitle";

/* View HTML page. */
"local.viewHTML" = "local.viewHTML";

/* Delete */
"menu.delete" = "menu.delete";

/* Info */
"menu.info" = "menu.info";

/* Insert mode */
"menu.insertMode" = "menu.insertMode";

/* Move */
"menu.move" = "menu.move";

/* Open in new panel */
"menu.openInNewPanel" = "menu.openInNewPanel";

/* Rename */
"menu.rename" = "menu.rename";

/* Selection mode */
"menu.selectionMode" = "menu.selectionMode";

/* Share */
"menu.share" = "menu.share";

/* No */
"no" = "no";

/* Ok */
"ok" = "ok";

/* Authenticate To Turn Off Authentication. */
"settings.authenticateToTurnOffAuthentication" = "settings.authenticateToTurnOffAuthentication";

/* Cannot turn off authentication. */
"settings.cannotTurnOffAuthentication" = "settings.cannotTurnOffAuthentication";

/* Use Face ID. */
"settings.useFaceID" = "settings.useFaceID";

/* Use Touch ID */
"settings.useTouchID" = "settings.useTouchID";

/* Accept invitation from peer. */
"terminal.accept" = "terminal.accept";

/* Ask for accepting invitation from peer. */
"terminal.acceptInvitation" = "terminal.acceptInvitation";

/* Decline invitation from peer. */
"terminal.decline" = "terminal.decline";

/* Text printed after an authentication error. */
"terminal.errorAuthenticating" = "terminal.errorAuthenticating";

/* Text printed after a connection error. */
"terminal.errorConnecting" = "terminal.errorConnecting";

/* Title of function keys popover. */
"terminal.functionKey" = "terminal.functionKey";

/* Disable selection mode. */
"terminal.insertMode" = "terminal.insertMode";

/* Paste text to the terminal. */
"terminal.paste" = "terminal.paste";

/* Ask for accepting invitation from peer. */
"terminal.peerWantsToSeeTheTerminal" = "terminal.peerWantsToSeeTheTerminal";

/* Title of an alert. */
"terminal.selectAction" = "terminal.selectAction";

/* Request a commit message to the user. */
"terminal.selectionMode" = "terminal.selectionMode";

/* Key command description. */
"terminal.sendCtrlKey" = "terminal.sendCtrlKey";

/* Key command description. */
"terminal.sendDownArrow" = "terminal.sendDownArrow";

/* Key command description */
"terminal.sendEscKey" = "terminal.sendEscKey";

/* Key command description. */
"terminal.sendLeftArrow" = "terminal.sendLeftArrow";

/* Key command description. */
"terminal.sendRightArrow" = "terminal.sendRightArrow";

/* Key command description. */
"terminal.sendUpArrow" = "terminal.sendUpArrow";

/* Uploading */
"uploading" = "uploading";

/* Yes */
"yes" = "yes";

